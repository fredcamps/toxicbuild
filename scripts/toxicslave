#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2015 Juca Crispim <juca@poraodojuca.net>

# This file is part of toxicbuild.

# toxicbuild is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# toxicbuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with toxicbuild. If not, see <http://www.gnu.org/licenses/>.

import logging
import os
import pkg_resources
import shutil
from mando import command, main
from toxicbuild.core.utils import daemonize as daemon

PIDFILE = 'toxicslave.pid'


@command
def start(workdir, daemonize=False, stdout='/dev/null', stderr='/dev/null',
          conffile=None, loglevel='info', pidfile=PIDFILE):
    """ Starts the build server.

    Starts the build server to listen on the specified port for
    requests from addr (0.0.0.0 means everyone). Addr and port params
    came from the configfile

    :param workdir: Work directory for server.
    :param --daemonize: Run as daemon. Defaults to False
    :param --stdout: stdout path. Defaults to /dev/null
    :param --stderr: stderr path. Defaults to /dev/null
    :param -c, --conffile: path to config file. Defaults to None.
      If not conffile, will look for a file called ``toxicslave.conf``
      inside ``workdir``
    :param --loglevel: Level for logging messages. Defaults to `info`.
    :param --pidfile: Name of the file to use as pidfile.  Defaults to
      ``toxicslave.pid``
    """

    if conffile:
        os.environ['TOXICSLAVE_SETTINGS'] = conffile
    else:
        os.environ['TOXICSLAVE_SETTINGS'] = os.path.join(workdir,
                                                         'toxicslave.conf')

    # These toxicbuild.slave imports must be here so I can
    # change the settings file before settings are instanciated.
    from toxicbuild.slave import server, settings

    addr = settings.ADDR
    port = settings.PORT

    if daemonize:
        daemon(call=server.run_server, cargs=(addr, port), ckwargs={},
               stdout=stdout, stderr=stderr, workdir=workdir, pidfile=pidfile)
    else:
        loglevel = getattr(logging, loglevel.upper())
        logging.basicConfig(level=loglevel)

        os.chdir(workdir)
        server.run_server(addr, port)


@command
def stop(workdir, pidfile=PIDFILE):
    """ Stops a buid server instance.

    :param workdir: Workdir for master to be killed.
    :param --pidfile: Name of the file to use as pidfile.  Defaults to
      ``toxicslave.pid``
    """

    os.chdir(workdir)
    with open(pidfile) as fd:
        pid = int(fd.read())

    os.kill(pid, 9)
    os.remove(pidfile)


@command
def create(root_dir):
    """ Create a new toxicslave project.

    :param --root_dir: Root directory for toxicslave.
    """
    print('Creating root_dir {}'.format(root_dir))

    os.mkdir(root_dir)

    fakesettings = os.path.join(root_dir, 'fakesettings.py')
    with open(fakesettings, 'w') as f:
        f.write('DATABASE = {}')
    os.environ['TOXICSLAVE_SETTINGS'] = fakesettings

    template_fname = 'toxicslave.conf.tmpl'
    template_dir = pkg_resources.resource_filename('toxicbuild.slave',
                                                   'templates')
    template_file = os.path.join(template_dir, template_fname)
    dest_file = os.path.join(root_dir, 'toxicslave.conf')
    shutil.copyfile(template_file, dest_file)
    os.remove(fakesettings)


if __name__ == '__main__':
    main()
