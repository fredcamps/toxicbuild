#!/usr/bin/env python
#-*- coding: utf-8 -*-

# Copyright 2015 Juca Crispim <juca@poraodojuca.net>

# This file is part of toxicbuild.

# toxicbuild is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# toxicbuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with toxicbuild. If not, see <http://www.gnu.org/licenses/>.

import os
from mando import command, main
from toxicbuild.core.utils import daemonize as daemon

PIDFILE = 'toxicmaster.pid'


@command
def start(workdir, daemonize=False, stdout='/dev/null', stderr='/dev/null',
          conffile=None, loglevel='info'):
    """ Starts toxicbuild master.

    :param workdir: Work directory for server.
    :param --daemonize: Run as daemon. Defaults to False
    :param --stdout: stdout path. Defaults to /dev/null
    :param --stderr: stderr path. Defaults to /dev/null
    :param -c, --conffile: path to config file. Defaults to None.
      If not conffile, will look for a file called ``toxicmaster.conf``
      inside ``workdir``
    :param --loglevel: Level for logging messages. Defaults to `info`.
    """

    if conffile:
        os.environ['TOXICMASTER_SETTINGS'] = conffile
    else:
        os.environ['TOXICMASTER_SETTINGS'] = os.path.join(workdir,
                                                          'toxicmaster.conf')

    from toxicbuild.master import run

    if daemonize:
        daemon(call=run, cargs=(loglevel,), ckwargs={}, stdout=stdout,
               stderr=stderr, workdir=workdir, pidfile=PIDFILE)
    else:
        run(loglevel)


@command
def stop(workdir):
    """ Kills toxicmaster.

    :param workdir: Workdir for master to be killed. Looks for a file
      ``toxicmaster.pid`` inside ``workdir``.
    """

    os.chdir(workdir)
    with open(PIDFILE) as fd:
        pid = int(fd.read())

    os.kill(pid, 9)
    os.remove(PIDFILE)


if __name__ == '__main__':
    main()
